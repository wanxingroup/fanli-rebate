// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rebate.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	rebate.proto
	rebate_common.proto

It has these top-level messages:
	Rebate
	SetRebateRequest
	SetRebateReply
	BatchRebateRequest
	BatchRebateReply
	GetRebateRequest
	GetRebateReply
	RebateOrder
	CreateRebateOrderRequest
	CreateRebateOrderReply
	GetRebateOrderListRequest
	GetRebateOrderListReply
	Error
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Rebate struct {
	// itemId
	ItemId uint64 `protobuf:"varint,1,opt,name=itemId" json:"itemId,omitempty"`
	// 类型
	ItemType uint32 `protobuf:"varint,2,opt,name=itemType" json:"itemType,omitempty"`
	// 一级拨比
	FirstRebateRatio uint32 `protobuf:"varint,3,opt,name=FirstRebateRatio" json:"FirstRebateRatio,omitempty"`
	// 二级拨比
	SecondRebateRatio uint32 `protobuf:"varint,4,opt,name=SecondRebateRatio" json:"SecondRebateRatio,omitempty"`
	// 创建人
	CreatedBy uint64 `protobuf:"varint,5,opt,name=CreatedBy" json:"CreatedBy,omitempty"`
	// 更新人
	UpdatedBy uint64 `protobuf:"varint,6,opt,name=UpdatedBy" json:"UpdatedBy,omitempty"`
}

func (m *Rebate) Reset()                    { *m = Rebate{} }
func (m *Rebate) String() string            { return proto.CompactTextString(m) }
func (*Rebate) ProtoMessage()               {}
func (*Rebate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Rebate) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Rebate) GetItemType() uint32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *Rebate) GetFirstRebateRatio() uint32 {
	if m != nil {
		return m.FirstRebateRatio
	}
	return 0
}

func (m *Rebate) GetSecondRebateRatio() uint32 {
	if m != nil {
		return m.SecondRebateRatio
	}
	return 0
}

func (m *Rebate) GetCreatedBy() uint64 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *Rebate) GetUpdatedBy() uint64 {
	if m != nil {
		return m.UpdatedBy
	}
	return 0
}

type SetRebateRequest struct {
	Rebate *Rebate `protobuf:"bytes,1,opt,name=Rebate" json:"Rebate,omitempty"`
}

func (m *SetRebateRequest) Reset()                    { *m = SetRebateRequest{} }
func (m *SetRebateRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRebateRequest) ProtoMessage()               {}
func (*SetRebateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SetRebateRequest) GetRebate() *Rebate {
	if m != nil {
		return m.Rebate
	}
	return nil
}

type SetRebateReply struct {
	Err    *Error  `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Rebate *Rebate `protobuf:"bytes,2,opt,name=Rebate" json:"Rebate,omitempty"`
}

func (m *SetRebateReply) Reset()                    { *m = SetRebateReply{} }
func (m *SetRebateReply) String() string            { return proto.CompactTextString(m) }
func (*SetRebateReply) ProtoMessage()               {}
func (*SetRebateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetRebateReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *SetRebateReply) GetRebate() *Rebate {
	if m != nil {
		return m.Rebate
	}
	return nil
}

type BatchRebateRequest struct {
	Rebate []*Rebate `protobuf:"bytes,1,rep,name=rebate" json:"rebate,omitempty"`
}

func (m *BatchRebateRequest) Reset()                    { *m = BatchRebateRequest{} }
func (m *BatchRebateRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchRebateRequest) ProtoMessage()               {}
func (*BatchRebateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BatchRebateRequest) GetRebate() []*Rebate {
	if m != nil {
		return m.Rebate
	}
	return nil
}

type BatchRebateReply struct {
	Err *Error `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *BatchRebateReply) Reset()                    { *m = BatchRebateReply{} }
func (m *BatchRebateReply) String() string            { return proto.CompactTextString(m) }
func (*BatchRebateReply) ProtoMessage()               {}
func (*BatchRebateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BatchRebateReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type GetRebateRequest struct {
	// itemId
	ItemId uint64 `protobuf:"varint,1,opt,name=itemId" json:"itemId,omitempty"`
	// 类型
	ItemType uint32 `protobuf:"varint,2,opt,name=itemType" json:"itemType,omitempty"`
}

func (m *GetRebateRequest) Reset()                    { *m = GetRebateRequest{} }
func (m *GetRebateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRebateRequest) ProtoMessage()               {}
func (*GetRebateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetRebateRequest) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *GetRebateRequest) GetItemType() uint32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

type GetRebateReply struct {
	Err    *Error  `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	Rebate *Rebate `protobuf:"bytes,2,opt,name=Rebate" json:"Rebate,omitempty"`
}

func (m *GetRebateReply) Reset()                    { *m = GetRebateReply{} }
func (m *GetRebateReply) String() string            { return proto.CompactTextString(m) }
func (*GetRebateReply) ProtoMessage()               {}
func (*GetRebateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetRebateReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetRebateReply) GetRebate() *Rebate {
	if m != nil {
		return m.Rebate
	}
	return nil
}

type RebateOrder struct {
	// orderId
	OrderId uint64 `protobuf:"varint,1,opt,name=orderId" json:"orderId,omitempty"`
	// 用户 Id
	UserId uint64 `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	// 手机号
	Mobile string `protobuf:"bytes,3,opt,name=mobile" json:"mobile,omitempty"`
	// 支付金额
	PaidPrice uint64 `protobuf:"varint,4,opt,name=paidPrice" json:"paidPrice,omitempty"`
	// 一级返利额度
	FirstRebate uint64 `protobuf:"varint,5,opt,name=firstRebate" json:"firstRebate,omitempty"`
	// 一级用户 Id
	FirstUserId uint64 `protobuf:"varint,6,opt,name=firstUserId" json:"firstUserId,omitempty"`
	// 二级返利额度
	SecondRebate uint64 `protobuf:"varint,7,opt,name=secondRebate" json:"secondRebate,omitempty"`
	// 二级用户 Id
	SecondUserId uint64 `protobuf:"varint,8,opt,name=secondUserId" json:"secondUserId,omitempty"`
	// 支付时间
	PaidTime string `protobuf:"bytes,9,opt,name=paidTime" json:"paidTime,omitempty"`
	// 订单类型
	ItemType uint32 `protobuf:"varint,10,opt,name=itemType" json:"itemType,omitempty"`
	// shopId
	ShopId uint64 `protobuf:"varint,11,opt,name=shopId" json:"shopId,omitempty"`
	// 一级返利用户的类型
	FirstType uint32 `protobuf:"varint,12,opt,name=firstType" json:"firstType,omitempty"`
	// 二级返利用户的类型
	SecondType uint32 `protobuf:"varint,13,opt,name=secondType" json:"secondType,omitempty"`
	// 一级返利的比例
	FirstRebateRate uint64 `protobuf:"varint,14,opt,name=firstRebateRate" json:"firstRebateRate,omitempty"`
	// 二级返利的比例
	SecondRebateRate uint64 `protobuf:"varint,15,opt,name=secondRebateRate" json:"secondRebateRate,omitempty"`
	// itemId
	ItemId uint64 `protobuf:"varint,16,opt,name=itemId" json:"itemId,omitempty"`
	// 一级用户返利的名字
	FirstUserName string `protobuf:"bytes,17,opt,name=FirstUserName" json:"FirstUserName,omitempty"`
	// 二级用户返利名字
	SecondUserName string `protobuf:"bytes,18,opt,name=SecondUserName" json:"SecondUserName,omitempty"`
	// 当前用户的名字
	UserName string `protobuf:"bytes,19,opt,name=userName" json:"userName,omitempty"`
}

func (m *RebateOrder) Reset()                    { *m = RebateOrder{} }
func (m *RebateOrder) String() string            { return proto.CompactTextString(m) }
func (*RebateOrder) ProtoMessage()               {}
func (*RebateOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RebateOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *RebateOrder) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RebateOrder) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *RebateOrder) GetPaidPrice() uint64 {
	if m != nil {
		return m.PaidPrice
	}
	return 0
}

func (m *RebateOrder) GetFirstRebate() uint64 {
	if m != nil {
		return m.FirstRebate
	}
	return 0
}

func (m *RebateOrder) GetFirstUserId() uint64 {
	if m != nil {
		return m.FirstUserId
	}
	return 0
}

func (m *RebateOrder) GetSecondRebate() uint64 {
	if m != nil {
		return m.SecondRebate
	}
	return 0
}

func (m *RebateOrder) GetSecondUserId() uint64 {
	if m != nil {
		return m.SecondUserId
	}
	return 0
}

func (m *RebateOrder) GetPaidTime() string {
	if m != nil {
		return m.PaidTime
	}
	return ""
}

func (m *RebateOrder) GetItemType() uint32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *RebateOrder) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *RebateOrder) GetFirstType() uint32 {
	if m != nil {
		return m.FirstType
	}
	return 0
}

func (m *RebateOrder) GetSecondType() uint32 {
	if m != nil {
		return m.SecondType
	}
	return 0
}

func (m *RebateOrder) GetFirstRebateRate() uint64 {
	if m != nil {
		return m.FirstRebateRate
	}
	return 0
}

func (m *RebateOrder) GetSecondRebateRate() uint64 {
	if m != nil {
		return m.SecondRebateRate
	}
	return 0
}

func (m *RebateOrder) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *RebateOrder) GetFirstUserName() string {
	if m != nil {
		return m.FirstUserName
	}
	return ""
}

func (m *RebateOrder) GetSecondUserName() string {
	if m != nil {
		return m.SecondUserName
	}
	return ""
}

func (m *RebateOrder) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type CreateRebateOrderRequest struct {
	RebateOrder *RebateOrder `protobuf:"bytes,1,opt,name=RebateOrder" json:"RebateOrder,omitempty"`
}

func (m *CreateRebateOrderRequest) Reset()                    { *m = CreateRebateOrderRequest{} }
func (m *CreateRebateOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRebateOrderRequest) ProtoMessage()               {}
func (*CreateRebateOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateRebateOrderRequest) GetRebateOrder() *RebateOrder {
	if m != nil {
		return m.RebateOrder
	}
	return nil
}

type CreateRebateOrderReply struct {
	Err         *Error       `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	RebateOrder *RebateOrder `protobuf:"bytes,2,opt,name=RebateOrder" json:"RebateOrder,omitempty"`
}

func (m *CreateRebateOrderReply) Reset()                    { *m = CreateRebateOrderReply{} }
func (m *CreateRebateOrderReply) String() string            { return proto.CompactTextString(m) }
func (*CreateRebateOrderReply) ProtoMessage()               {}
func (*CreateRebateOrderReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateRebateOrderReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *CreateRebateOrderReply) GetRebateOrder() *RebateOrder {
	if m != nil {
		return m.RebateOrder
	}
	return nil
}

type GetRebateOrderListRequest struct {
	OrderId       uint64 `protobuf:"varint,1,opt,name=orderId" json:"orderId,omitempty"`
	UserType      uint32 `protobuf:"varint,2,opt,name=userType" json:"userType,omitempty"`
	UserId        uint64 `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	PaidTimeStart string `protobuf:"bytes,4,opt,name=paidTimeStart" json:"paidTimeStart,omitempty"`
	PaidTimeEnd   string `protobuf:"bytes,5,opt,name=paidTimeEnd" json:"paidTimeEnd,omitempty"`
	Page          uint64 `protobuf:"varint,6,opt,name=page" json:"page,omitempty"`
	PageSize      uint64 `protobuf:"varint,7,opt,name=pageSize" json:"pageSize,omitempty"`
	ShopId        uint64 `protobuf:"varint,8,opt,name=shopId" json:"shopId,omitempty"`
}

func (m *GetRebateOrderListRequest) Reset()                    { *m = GetRebateOrderListRequest{} }
func (m *GetRebateOrderListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRebateOrderListRequest) ProtoMessage()               {}
func (*GetRebateOrderListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetRebateOrderListRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *GetRebateOrderListRequest) GetUserType() uint32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *GetRebateOrderListRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetRebateOrderListRequest) GetPaidTimeStart() string {
	if m != nil {
		return m.PaidTimeStart
	}
	return ""
}

func (m *GetRebateOrderListRequest) GetPaidTimeEnd() string {
	if m != nil {
		return m.PaidTimeEnd
	}
	return ""
}

func (m *GetRebateOrderListRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetRebateOrderListRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetRebateOrderListRequest) GetShopId() uint64 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

type GetRebateOrderListReply struct {
	Err         *Error         `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
	RebateTotal uint64         `protobuf:"varint,2,opt,name=RebateTotal" json:"RebateTotal,omitempty"`
	RebateOrder []*RebateOrder `protobuf:"bytes,3,rep,name=RebateOrder" json:"RebateOrder,omitempty"`
	PaidTotal   uint64         `protobuf:"varint,4,opt,name=PaidTotal" json:"PaidTotal,omitempty"`
	Count       uint64         `protobuf:"varint,5,opt,name=Count" json:"Count,omitempty"`
}

func (m *GetRebateOrderListReply) Reset()                    { *m = GetRebateOrderListReply{} }
func (m *GetRebateOrderListReply) String() string            { return proto.CompactTextString(m) }
func (*GetRebateOrderListReply) ProtoMessage()               {}
func (*GetRebateOrderListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetRebateOrderListReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetRebateOrderListReply) GetRebateTotal() uint64 {
	if m != nil {
		return m.RebateTotal
	}
	return 0
}

func (m *GetRebateOrderListReply) GetRebateOrder() []*RebateOrder {
	if m != nil {
		return m.RebateOrder
	}
	return nil
}

func (m *GetRebateOrderListReply) GetPaidTotal() uint64 {
	if m != nil {
		return m.PaidTotal
	}
	return 0
}

func (m *GetRebateOrderListReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*Rebate)(nil), "rebate.pkg.rpc.protos.Rebate")
	proto.RegisterType((*SetRebateRequest)(nil), "rebate.pkg.rpc.protos.SetRebateRequest")
	proto.RegisterType((*SetRebateReply)(nil), "rebate.pkg.rpc.protos.SetRebateReply")
	proto.RegisterType((*BatchRebateRequest)(nil), "rebate.pkg.rpc.protos.BatchRebateRequest")
	proto.RegisterType((*BatchRebateReply)(nil), "rebate.pkg.rpc.protos.BatchRebateReply")
	proto.RegisterType((*GetRebateRequest)(nil), "rebate.pkg.rpc.protos.GetRebateRequest")
	proto.RegisterType((*GetRebateReply)(nil), "rebate.pkg.rpc.protos.GetRebateReply")
	proto.RegisterType((*RebateOrder)(nil), "rebate.pkg.rpc.protos.RebateOrder")
	proto.RegisterType((*CreateRebateOrderRequest)(nil), "rebate.pkg.rpc.protos.CreateRebateOrderRequest")
	proto.RegisterType((*CreateRebateOrderReply)(nil), "rebate.pkg.rpc.protos.CreateRebateOrderReply")
	proto.RegisterType((*GetRebateOrderListRequest)(nil), "rebate.pkg.rpc.protos.GetRebateOrderListRequest")
	proto.RegisterType((*GetRebateOrderListReply)(nil), "rebate.pkg.rpc.protos.GetRebateOrderListReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RebateController service

type RebateControllerClient interface {
	// 设置对应的商品返利比例
	SetRebate(ctx context.Context, in *SetRebateRequest, opts ...grpc.CallOption) (*SetRebateReply, error)
	// 批量设置对应的商品返利比例
	BatchRebate(ctx context.Context, in *BatchRebateRequest, opts ...grpc.CallOption) (*BatchRebateReply, error)
	// 获取商品返利比例
	GetRebate(ctx context.Context, in *GetRebateRequest, opts ...grpc.CallOption) (*GetRebateReply, error)
	// 创建返利订单
	CreateRebateOrder(ctx context.Context, in *CreateRebateOrderRequest, opts ...grpc.CallOption) (*CreateRebateOrderReply, error)
	// 获取商品返利订单列表
	GetRebateOrderList(ctx context.Context, in *GetRebateOrderListRequest, opts ...grpc.CallOption) (*GetRebateOrderListReply, error)
}

type rebateControllerClient struct {
	cc *grpc.ClientConn
}

func NewRebateControllerClient(cc *grpc.ClientConn) RebateControllerClient {
	return &rebateControllerClient{cc}
}

func (c *rebateControllerClient) SetRebate(ctx context.Context, in *SetRebateRequest, opts ...grpc.CallOption) (*SetRebateReply, error) {
	out := new(SetRebateReply)
	err := grpc.Invoke(ctx, "/rebate.pkg.rpc.protos.RebateController/SetRebate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebateControllerClient) BatchRebate(ctx context.Context, in *BatchRebateRequest, opts ...grpc.CallOption) (*BatchRebateReply, error) {
	out := new(BatchRebateReply)
	err := grpc.Invoke(ctx, "/rebate.pkg.rpc.protos.RebateController/BatchRebate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebateControllerClient) GetRebate(ctx context.Context, in *GetRebateRequest, opts ...grpc.CallOption) (*GetRebateReply, error) {
	out := new(GetRebateReply)
	err := grpc.Invoke(ctx, "/rebate.pkg.rpc.protos.RebateController/GetRebate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebateControllerClient) CreateRebateOrder(ctx context.Context, in *CreateRebateOrderRequest, opts ...grpc.CallOption) (*CreateRebateOrderReply, error) {
	out := new(CreateRebateOrderReply)
	err := grpc.Invoke(ctx, "/rebate.pkg.rpc.protos.RebateController/CreateRebateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rebateControllerClient) GetRebateOrderList(ctx context.Context, in *GetRebateOrderListRequest, opts ...grpc.CallOption) (*GetRebateOrderListReply, error) {
	out := new(GetRebateOrderListReply)
	err := grpc.Invoke(ctx, "/rebate.pkg.rpc.protos.RebateController/GetRebateOrderList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RebateController service

type RebateControllerServer interface {
	// 设置对应的商品返利比例
	SetRebate(context.Context, *SetRebateRequest) (*SetRebateReply, error)
	// 批量设置对应的商品返利比例
	BatchRebate(context.Context, *BatchRebateRequest) (*BatchRebateReply, error)
	// 获取商品返利比例
	GetRebate(context.Context, *GetRebateRequest) (*GetRebateReply, error)
	// 创建返利订单
	CreateRebateOrder(context.Context, *CreateRebateOrderRequest) (*CreateRebateOrderReply, error)
	// 获取商品返利订单列表
	GetRebateOrderList(context.Context, *GetRebateOrderListRequest) (*GetRebateOrderListReply, error)
}

func RegisterRebateControllerServer(s *grpc.Server, srv RebateControllerServer) {
	s.RegisterService(&_RebateController_serviceDesc, srv)
}

func _RebateController_SetRebate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRebateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebateControllerServer).SetRebate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rebate.pkg.rpc.protos.RebateController/SetRebate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebateControllerServer).SetRebate(ctx, req.(*SetRebateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebateController_BatchRebate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRebateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebateControllerServer).BatchRebate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rebate.pkg.rpc.protos.RebateController/BatchRebate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebateControllerServer).BatchRebate(ctx, req.(*BatchRebateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebateController_GetRebate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRebateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebateControllerServer).GetRebate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rebate.pkg.rpc.protos.RebateController/GetRebate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebateControllerServer).GetRebate(ctx, req.(*GetRebateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebateController_CreateRebateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRebateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebateControllerServer).CreateRebateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rebate.pkg.rpc.protos.RebateController/CreateRebateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebateControllerServer).CreateRebateOrder(ctx, req.(*CreateRebateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RebateController_GetRebateOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRebateOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RebateControllerServer).GetRebateOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rebate.pkg.rpc.protos.RebateController/GetRebateOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RebateControllerServer).GetRebateOrderList(ctx, req.(*GetRebateOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RebateController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rebate.pkg.rpc.protos.RebateController",
	HandlerType: (*RebateControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRebate",
			Handler:    _RebateController_SetRebate_Handler,
		},
		{
			MethodName: "BatchRebate",
			Handler:    _RebateController_BatchRebate_Handler,
		},
		{
			MethodName: "GetRebate",
			Handler:    _RebateController_GetRebate_Handler,
		},
		{
			MethodName: "CreateRebateOrder",
			Handler:    _RebateController_CreateRebateOrder_Handler,
		},
		{
			MethodName: "GetRebateOrderList",
			Handler:    _RebateController_GetRebateOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rebate.proto",
}

func init() { proto.RegisterFile("rebate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0x3e, 0xf9, 0x69, 0x9a, 0x4c, 0x9a, 0x36, 0xdd, 0x9e, 0xd3, 0xe3, 0x63, 0xf5, 0xa0, 0xc8,
	0x2a, 0xb4, 0x20, 0x08, 0xa8, 0x88, 0x17, 0x48, 0x69, 0xa3, 0x0a, 0x04, 0x95, 0xd3, 0xde, 0x20,
	0x55, 0xe0, 0xc6, 0xdb, 0xd6, 0x22, 0xc9, 0x9a, 0xb5, 0x23, 0x08, 0x0f, 0xc1, 0x63, 0xf0, 0x40,
	0xbc, 0x03, 0xe2, 0x19, 0xb8, 0x43, 0x3b, 0xbb, 0xeb, 0xac, 0xed, 0x86, 0xa6, 0xb9, 0xe1, 0xca,
	0x9e, 0x6f, 0xbf, 0x9d, 0xd9, 0x99, 0x9d, 0x6f, 0x16, 0x56, 0x38, 0x3d, 0xf7, 0x62, 0xda, 0x0e,
	0x39, 0x8b, 0x19, 0xf9, 0x47, 0x5b, 0xef, 0x2f, 0xdb, 0x3c, 0xec, 0x4b, 0x34, 0xb2, 0x37, 0x24,
	0xfc, 0xb6, 0xcf, 0x86, 0x43, 0x36, 0x92, 0xa8, 0xf3, 0xad, 0x00, 0x15, 0x17, 0x71, 0xb2, 0x09,
	0x95, 0x20, 0xa6, 0xc3, 0x23, 0xdf, 0x2a, 0xb4, 0x0a, 0xbb, 0x65, 0x57, 0x59, 0xc4, 0x86, 0xaa,
	0xf8, 0x3b, 0x99, 0x84, 0xd4, 0x2a, 0xb6, 0x0a, 0xbb, 0x0d, 0x37, 0xb1, 0xc9, 0x03, 0x68, 0x1e,
	0x06, 0x3c, 0x8a, 0xa5, 0x0b, 0xd7, 0x8b, 0x03, 0x66, 0x95, 0x90, 0x93, 0xc3, 0xc9, 0x43, 0x58,
	0xef, 0xd1, 0x3e, 0x1b, 0xf9, 0x26, 0xb9, 0x8c, 0xe4, 0xfc, 0x02, 0xd9, 0x82, 0xda, 0x3e, 0xa7,
	0x5e, 0x4c, 0xfd, 0xce, 0xc4, 0x5a, 0xc2, 0x03, 0x4d, 0x01, 0xb1, 0x7a, 0x1a, 0xfa, 0x6a, 0xb5,
	0x22, 0x57, 0x13, 0xc0, 0x39, 0x82, 0x66, 0x8f, 0xea, 0xd8, 0xf4, 0xc3, 0x98, 0x46, 0x31, 0x79,
	0xa6, 0xf3, 0xc4, 0xec, 0xea, 0x7b, 0xff, 0xb7, 0xaf, 0xad, 0x52, 0x5b, 0xed, 0x52, 0x64, 0xe7,
	0x23, 0xac, 0x1a, 0xae, 0xc2, 0xc1, 0x84, 0xb4, 0xa1, 0x44, 0x39, 0x57, 0x5e, 0xb6, 0x66, 0x78,
	0x39, 0xe0, 0x9c, 0x71, 0x57, 0x10, 0x8d, 0xc0, 0xc5, 0xdb, 0x04, 0x7e, 0x01, 0xa4, 0xe3, 0xc5,
	0xfd, 0xab, 0x5c, 0x16, 0x5c, 0x67, 0x51, 0x9a, 0xc3, 0x99, 0x5c, 0x75, 0x3a, 0xd0, 0x4c, 0x39,
	0x5b, 0x20, 0x0f, 0xe7, 0x10, 0x9a, 0xdd, 0x6c, 0x51, 0x17, 0x68, 0x19, 0x51, 0xd1, 0xee, 0x1f,
	0xa9, 0xe8, 0x8f, 0x32, 0xd4, 0xe5, 0xef, 0x6b, 0xee, 0x53, 0x4e, 0x2c, 0x58, 0x66, 0xe2, 0x27,
	0x39, 0xbd, 0x36, 0x45, 0x5a, 0xe3, 0x08, 0x17, 0x8a, 0x32, 0x2d, 0x69, 0x09, 0x7c, 0xc8, 0xce,
	0x83, 0x01, 0xc5, 0x1e, 0xaf, 0xb9, 0xca, 0x12, 0xdd, 0x18, 0x7a, 0x81, 0x7f, 0xcc, 0x83, 0x3e,
	0xc5, 0x8e, 0x2e, 0xbb, 0x53, 0x80, 0xb4, 0xa0, 0x7e, 0x31, 0xd5, 0x82, 0xea, 0x65, 0x13, 0x4a,
	0x18, 0xa7, 0x32, 0x68, 0xc5, 0x60, 0x48, 0x88, 0x38, 0xb0, 0x12, 0x19, 0x12, 0xb1, 0x96, 0x91,
	0x92, 0xc2, 0xa6, 0x1c, 0xe5, 0xa6, 0x6a, 0x72, 0x94, 0x1f, 0x1b, 0xaa, 0xe2, 0x60, 0x27, 0xc1,
	0x90, 0x5a, 0x35, 0xcc, 0x21, 0xb1, 0x53, 0x97, 0x06, 0x19, 0x9d, 0x6f, 0x42, 0x25, 0xba, 0x62,
	0xe1, 0x91, 0x6f, 0xd5, 0x65, 0x45, 0xa4, 0x25, 0x32, 0xc7, 0x63, 0xe2, 0xa6, 0x15, 0xdc, 0x34,
	0x05, 0xc8, 0x1d, 0x00, 0x19, 0x1d, 0x97, 0x1b, 0xb8, 0x6c, 0x20, 0x64, 0x17, 0xd6, 0x2e, 0x52,
	0x53, 0x82, 0x5a, 0xab, 0xe8, 0x3e, 0x0b, 0x8b, 0x39, 0x13, 0xa5, 0x47, 0x04, 0xb5, 0xd6, 0x90,
	0x9a, 0xc3, 0x8d, 0xa6, 0x6c, 0xa6, 0x9a, 0x72, 0x1b, 0x1a, 0x87, 0xba, 0xa4, 0xaf, 0xbc, 0x21,
	0xb5, 0xd6, 0xb1, 0x00, 0x69, 0x90, 0xdc, 0x13, 0x82, 0xd7, 0x15, 0x43, 0x1a, 0x41, 0x5a, 0x06,
	0x15, 0xd5, 0x1a, 0x6b, 0xc6, 0x86, 0xac, 0xa4, 0xb6, 0x9d, 0x77, 0x60, 0xc9, 0x51, 0x65, 0xb4,
	0x9b, 0x96, 0xcc, 0xf3, 0x54, 0x13, 0xaa, 0xa6, 0x77, 0x7e, 0xdb, 0xc1, 0x72, 0xbf, 0xb9, 0xcd,
	0xf9, 0x52, 0x80, 0xcd, 0x6b, 0x42, 0x2c, 0xa2, 0xa6, 0xcc, 0x81, 0x8a, 0x8b, 0x1d, 0xe8, 0x67,
	0x01, 0xfe, 0x4b, 0x64, 0x8d, 0xd0, 0xcb, 0x40, 0xdc, 0xa0, 0x4c, 0x7a, 0xb6, 0xd4, 0x54, 0x19,
	0xcd, 0x49, 0xa1, 0x6d, 0x43, 0x86, 0xa5, 0x94, 0x0c, 0xb7, 0xa1, 0xa1, 0x9b, 0xb6, 0x17, 0x7b,
	0x3c, 0x46, 0xc9, 0xd5, 0xdc, 0x34, 0x28, 0x44, 0xa5, 0x81, 0x83, 0x91, 0x8f, 0xb2, 0xab, 0xb9,
	0x26, 0x44, 0x08, 0x94, 0x43, 0xef, 0x92, 0x2a, 0xbd, 0xe1, 0xbf, 0x14, 0xc8, 0x25, 0xed, 0x05,
	0x9f, 0xb5, 0xc8, 0x12, 0xdb, 0x10, 0x41, 0xd5, 0x14, 0x81, 0xf3, 0xbd, 0x00, 0xff, 0x5e, 0x97,
	0xfb, 0x22, 0xb7, 0xd1, 0xd2, 0xb7, 0x71, 0xc2, 0x62, 0x6f, 0xa0, 0xe6, 0x8f, 0x09, 0x65, 0xef,
	0xab, 0x84, 0xef, 0xc0, 0x6d, 0xef, 0x4b, 0x08, 0xf7, 0x58, 0x94, 0x02, 0xa3, 0xa8, 0x91, 0x95,
	0x00, 0xe4, 0x6f, 0x58, 0xda, 0x67, 0xe3, 0x51, 0xac, 0x86, 0x95, 0x34, 0xf6, 0xbe, 0x96, 0xa1,
	0x29, 0x7d, 0xec, 0xb3, 0x51, 0xcc, 0xd9, 0x60, 0x40, 0x39, 0x39, 0x83, 0x5a, 0xf2, 0x40, 0x92,
	0x9d, 0x19, 0xc7, 0xc8, 0xbe, 0xc6, 0xf6, 0xdd, 0x9b, 0x89, 0xe1, 0x60, 0xe2, 0xfc, 0x45, 0xfa,
	0x50, 0x37, 0x5e, 0x2e, 0x72, 0x7f, 0xc6, 0xbe, 0xfc, 0x53, 0x69, 0xef, 0xcc, 0x43, 0x95, 0x41,
	0xce, 0xa0, 0xd6, 0xbd, 0x31, 0x87, 0xee, 0xbc, 0x39, 0x74, 0xb3, 0x39, 0x8c, 0x61, 0x3d, 0xa7,
	0x55, 0xf2, 0x78, 0xc6, 0xee, 0x59, 0x83, 0xc3, 0x7e, 0x34, 0xff, 0x06, 0x19, 0xf6, 0x13, 0x90,
	0x7c, 0x57, 0x92, 0x27, 0x37, 0x9d, 0x3a, 0x2b, 0x5e, 0xbb, 0x7d, 0x8b, 0x1d, 0x18, 0xb9, 0x53,
	0x7d, 0x53, 0x91, 0x9c, 0x73, 0xf9, 0x7d, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x62, 0x34,
	0x6b, 0xa1, 0x0a, 0x00, 0x00,
}
